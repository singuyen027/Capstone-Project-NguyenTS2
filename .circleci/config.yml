version: 2.1

executors:
  aws:
    docker:
      - image: amazon/aws-cli
  node:
    docker:
      - image: circleci/node:13.8.0


parameters:
  workflow-id:
    type: string
    default: "9767"

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>

jobs:

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Setup Security Group
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file network.yml \
              --tags project=udapeople-network-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-network-<< pipeline.parameters.workflow-id >>" \
              --capabilities CAPABILITY_IAM \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"

      - run:
          name: Setup EKS Cluster
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file aws_eks.yml \
              --tags project=udapeople-aws-eks-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-aws-eks-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
  start-build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  lint-code:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv
      - run:
          name: run lint
          command: |
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            . venv/bin/activate 
            make lint

  build-image:
    machine: true
    steps:
      - checkout
      - run: |
          echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
      - run: docker build -t singuyen027/project5:$CIRCLE_BRANCH .
      - run: docker push singuyen027/project5:$CIRCLE_BRANCH


  deploy-container-to-eks:
    executor: node
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            ls -la
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Install Kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
            curl -o kubectl.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl.sha256
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
      - run:
          name: Install ekstcl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Deploy To Kubernetes Cluster
          command: |
            aws eks --region us-west-2 update-kubeconfig --name Prod
            kubectl apply -f kube/loadbalancer.yaml
            kubectl apply -f kube/deployment.yaml
            kubectl get nodes
            kubectl get deployment
            kubectl get pod
            kubectl get services
      - run:
          name: Rolling Restart
          command: |
            kubectl --kubeconfig ~/.kube/config rollout restart deployment udacity-capstone


workflows:
  default:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: [deploy-infrastructure]
      - start-build
      - lint-code:
          requires: [start-build]
      - build-image:
          requires: [lint-code]
      - deploy-container-to-eks:
          requires: [build-image]
          filters:
            branches:
              only: [test-feature-branch]
